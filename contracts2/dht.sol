pragma solidity ^0.4.0;

contract DHT {
    uint constant enodeLength = 136;
    uint constant maxTokens = 100000;

    struct Node {
        string enode;
        uint start;
    }

    string strategy;
    uint tokens;
    Node[] nodes;               // sorted by `start'

    struct BytesBuffer {
        uint ix;
        uint len;
        bytes buffer;
    }

    function intToBytes(int v) internal pure returns (bytes) {
        uint l = 1;
        int vv = v;
        if (v < 0) {
            l++;
            vv = -v;
        }
        while (vv >= 10) {
            l++;
            vv /= 10;
        }

        bytes memory s = new bytes(l);
        l--;
        vv = v;
        if (v < 0) {
            s[0] = 0x2d;	// '-'
            vv = -v;
        }
        do {
            s[l--] = bytes1(0x30 + (vv % 10));	// 0x30 == '0'
            vv /= 10;
        } while (vv > 0);
        return s;
    }

    function bbAppend(BytesBuffer bb, bytes s) internal pure {
        if (bb.ix + s.length <= bb.len) {
            for (uint i = 0; i < s.length; i++)
                bb.buffer[bb.ix + i] = s[i];
        }
        bb.ix += s.length;
    }

    function bbAppendInt(BytesBuffer bb, int v) internal pure {
        bbAppend(bb, intToBytes(v));
    }

    function strncmp(string a, string b, uint len) internal pure returns (int) {
        bytes memory aa = bytes(a);
        bytes memory bb = bytes(b);
        uint alen = aa.length;
        uint blen = bb.length;
        uint clen = alen < blen ? alen : blen;
        if (len > 0 && clen > len)
            clen = len;
        for (uint i = 0; i < clen; i++) {
            if (aa[i] > bb[i])
                return 1;
            else if (aa[i] < bb[i])
                return -1;
        }
        if (len > 0 && clen == len)
            return 0;
        else if (alen > blen)
            return 1;
        else if (alen < blen)
            return -1;
        else
            return 0;
    }

    function init(string _strategy, uint _tokens) public {
        require(strncmp(_strategy, "simple", 0) == 0 && _tokens <= maxTokens);
        strategy = _strategy;
        tokens = _tokens;
        nodes.length = 0;
        return;
    }

    function search(string enode) internal view returns (int) {
        for (uint i = 0; i < nodes.length; i++) {
            if (strncmp(nodes[i].enode, enode, enodeLength) == 0)
                return int(i);
        }
        return -1;
    }

    function add(string enode, uint start) public {
        uint len = bytes(enode).length;
        require(len > enodeLength && start <= maxTokens);
        require(search(enode) == -1);
        nodes.push(Node(enode, start));
    }

    function del(string enode) public {
        uint len = bytes(enode).length;
        require(len > enodeLength);
        int ix = search(enode);
        require(ix != 0);
        if (ix < int(nodes.length) - 1)
            nodes[uint(ix)] = nodes[nodes.length-1];
        nodes.length--;
    }

    function update(string enode) public {
        uint len = bytes(enode).length;
        require(len > enodeLength);
        int ix = search(enode);
        require(ix != 0);
        nodes[uint(ix)].enode = enode;
    }

    function getInternal(BytesBuffer bb) internal view {
        bbAppend(bb, '{"strategy":"');
        bbAppend(bb, bytes(strategy));
        bbAppend(bb, '", "tokens":');
        bbAppendInt(bb, int(tokens));
        bbAppend(bb, ', "nodes":[');
        for (uint i = 0; i < nodes.length; i++) {
            if (i != 0)
                bbAppend(bb, ',');
            bbAppend(bb, '{"enode":"');
            bbAppend(bb, bytes(nodes[i].enode));
            bbAppend(bb, '", "start":');
            bbAppendInt(bb, int(nodes[i].start));
            bbAppend(bb, '}');
        }
        bbAppend(bb, ']}');
    }

    function get() public view returns (string) {
        BytesBuffer memory bb = BytesBuffer(0, 0, new bytes(1));
        getInternal(bb);
        bb.len = bb.ix;
        bb.ix = 0;
        bb.buffer = new bytes(bb.len);
        getInternal(bb);
        return string(bb.buffer);
    }
}

/* EOF */


/*
var dhtAddress = "0x484c6a445bbd3a4c8c35704995e6a07a377c03e4";
var dhtContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"_strategy","type":"string"},{"name":"_tokens","type":"uint256"}],"name":"init","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"enode","type":"string"}],"name":"del","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"enode","type":"string"},{"name":"start","type":"uint256"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"enode","type":"string"}],"name":"update","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}]);
var dht = dhtContract.new(
   {
     from: web3.eth.accounts[0], 
     data: '0x6060604052341561000f57600080fd5b61135f8061001e6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806238a5b5146100685780630bca089a146100ce57806336555b851461012b5780633d7403a3146101915780636d4ce63c146101ee57600080fd5b341561007357600080fd5b6100cc600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190505061027c565b005b34156100d957600080fd5b610129600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061030c565b005b341561013657600080fd5b61018f600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919050506103e0565b005b341561019c57600080fd5b6101ec600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506104a7565b005b34156101f957600080fd5b610201610512565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610241578082015181840152602081019050610226565b50505050905090810190601f16801561026e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60006102bf836040805190810160405280600681526020017f73696d706c65000000000000000000000000000000000000000000000000000081525060006105c2565b1480156102cf5750620186a08111155b15156102da57600080fd5b81600090805190602001906102f0929190611040565b5080600181905550600060028161030791906110c0565b505050565b6000808251915060888211151561032257600080fd5b61032b836108c4565b90506000811415151561033d57600080fd5b6001600280549050038112156103c557600260016002805490500381548110151561036457fe5b906000526020600020906002020160028281548110151561038157fe5b9060005260206000209060020201600082018160000190805460018160011615610100020316600290046103b69291906110f2565b50600182015481600101559050505b60028054809190600190036103da91906110c0565b50505050565b6000825190506088811180156103f95750620186a08211155b151561040457600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61042e846108c4565b14151561043a57600080fd5b6002805480600101828161044e9190611179565b91600052602060002090600202016000604080519081016040528087815260200186815250909190915060008201518160000190805190602001906104949291906111ab565b5060208201518160010155505050505050565b600080825191506088821115156104bd57600080fd5b6104c6836108c4565b9050600081141515156104d857600080fd5b826002828154811015156104e857fe5b9060005260206000209060020201600001908051906020019061050c929190611040565b50505050565b61051a61122b565b61052261123f565b6060604051908101604052806000815260200160008152602001600160405180591061054b5750595b9080825280602002602001820160405250815250905061056a816109e4565b8060000151816020018181525050600081600001818152505080602001516040518059106105955750595b908082528060200260200182016040525081604001819052506105b7816109e4565b806040015191505090565b60006105cc611267565b6105d4611267565b60008060008089955088945085519350845192508284106105f557826105f7565b835b915060008811801561060857508782115b15610611578791505b600090505b8181101561085457848181518110151561062c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191686828151811015156106a757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916111561072357600196506108b7565b848181518110151561073157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191686828151811015156107ac57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015610847577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96506108b7565b8080600101915050610616565b60008811801561086357508782145b1561087157600096506108b7565b8284111561088257600196506108b7565b828410156108b2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96506108b7565b600096505b5050505050509392505050565b600080600090505b6002805490508110156109ba57600061099f6002838154811015156108ed57fe5b90600052602060002090600202016000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109925780601f1061096757610100808354040283529160200191610992565b820191906000526020600020905b81548152906001019060200180831161097557829003601f168201915b50505050508560886105c2565b14156109ad578091506109de565b80806001019150506108cc565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91505b50919050565b6000610a25826040805190810160405280600d81526020017f7b227374726174656779223a2200000000000000000000000000000000000000815250610da8565b610ac98260008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610abf5780601f10610a9457610100808354040283529160200191610abf565b820191906000526020600020905b815481529060010190602001808311610aa257829003601f168201915b5050505050610da8565b610b08826040805190810160405280600c81526020017f222c2022746f6b656e73223a0000000000000000000000000000000000000000815250610da8565b610b1482600154610e91565b610b53826040805190810160405280600b81526020017f2c20226e6f646573223a5b000000000000000000000000000000000000000000815250610da8565b600090505b600280549050811015610d6557600081141515610baf57610bae826040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250610da8565b5b610bee826040805190810160405280600a81526020017f7b22656e6f6465223a2200000000000000000000000000000000000000000000815250610da8565b610cb082600283815481101515610c0157fe5b90600052602060002090600202016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ca65780601f10610c7b57610100808354040283529160200191610ca6565b820191906000526020600020905b815481529060010190602001808311610c8957829003601f168201915b5050505050610da8565b610cef826040805190810160405280600b81526020017f222c20227374617274223a000000000000000000000000000000000000000000815250610da8565b610d1982600283815481101515610d0257fe5b906000526020600020906002020160010154610e91565b610d58826040805190810160405280600181526020017f7d00000000000000000000000000000000000000000000000000000000000000815250610da8565b8080600101915050610b58565b610da4826040805190810160405280600281526020017f5d7d000000000000000000000000000000000000000000000000000000000000815250610da8565b5050565b600082602001518251846000015101111515610e7b57600090505b8151811015610e7a578181815181101515610dda57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002836040015182856000015101815181101515610e3d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610dc3565b5b8151836000018181510191508181525050505050565b610ea382610e9e83610ea7565b610da8565b5050565b610eaf611267565b600080610eba611267565b600192508491506000851215610ed95782806001019350508460000391505b5b600a82121515610f00578280600101935050600a82811515610ef857fe5b059150610eda565b82604051805910610f0e5750595b908082528060200260200182016040525090508280600190039350508491506000851215610fa057602d7f010000000000000000000000000000000000000000000000000000000000000002816000815181101515610f6957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508460000391505b5b600a82811515610fad57fe5b076030017f010000000000000000000000000000000000000000000000000000000000000002818480600190039550815181101515610fe857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8281151561102457fe5b059150600082131561103557610fa1565b809350505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061108157805160ff19168380011785556110af565b828001600101855582156110af579182015b828111156110ae578251825591602001919060010190611093565b5b5090506110bc919061127b565b5090565b8154818355818115116110ed576002028160020283600052602060002091820191016110ec91906112a0565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061112b5780548555611168565b8280016001018555821561116857600052602060002091601f016020900482015b8281111561116757825482559160010191906001019061114c565b5b509050611175919061127b565b5090565b8154818355818115116111a6576002028160020283600052602060002091820191016111a591906112a0565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111ec57805160ff191683800117855561121a565b8280016001018555821561121a579182015b828111156112195782518255916020019190600101906111fe565b5b509050611227919061127b565b5090565b602060405190810160405280600081525090565b60606040519081016040528060008152602001600081526020016112616112d7565b81525090565b602060405190810160405280600081525090565b61129d91905b80821115611299576000816000905550600101611281565b5090565b90565b6112d491905b808211156112d057600080820160006112bf91906112eb565b6001820160009055506002016112a6565b5090565b90565b602060405190810160405280600081525090565b50805460018160011615610100020316600290046000825580601f106113115750611330565b601f01602090049060005260206000209081019061132f919061127b565b5b505600a165627a7a7230582086e5f76681be20c751aa4c963e1b492edd7b9e91f2453d2f43d7c52d110a23d60029', 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })
*/